// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Collections (Sets of rewards)
model Collection {
  id          String   @id @default(uuid())
  name        String
  description String?
  iconEmoji   String   @default("ðŸ“¦")
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rewards Reward[]

  @@map("collections")
}

// Tags for organizing rewards
model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  color     String   @default("#3498db")
  createdAt DateTime @default(now())

  rewards RewardTag[]

  @@map("tags")
}

// Rewards (Images or Videos)
model Reward {
  id                      String   @id @default(uuid())
  name                    String
  description             String?
  rarity                  String   // common, rare, epic, legendary, mythic
  mediaType               String   // image, video
  googleDriveFileId       String
  googleDriveThumbnailId  String?
  isActive                Boolean  @default(true)
  sortOrder               Int      @default(0)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  tags RewardTag[]

  @@map("rewards")
}

// Many-to-many relationship between Rewards and Tags
model RewardTag {
  rewardId String
  tagId    String

  reward Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([rewardId, tagId])
  @@map("reward_tags")
}

// User sessions (for NextAuth)
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text  // Add @db.Text
  access_token      String? @db.Text  // Add @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text  // Add @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
